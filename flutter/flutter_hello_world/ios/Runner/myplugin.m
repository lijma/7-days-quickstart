// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "myplugin.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface SearchRequest ()
+ (SearchRequest *)fromList:(NSArray *)list;
+ (nullable SearchRequest *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SearchReply ()
+ (SearchReply *)fromList:(NSArray *)list;
+ (nullable SearchReply *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation SearchRequest
+ (instancetype)makeWithQuery:(NSString *)query {
  SearchRequest* pigeonResult = [[SearchRequest alloc] init];
  pigeonResult.query = query;
  return pigeonResult;
}
+ (SearchRequest *)fromList:(NSArray *)list {
  SearchRequest *pigeonResult = [[SearchRequest alloc] init];
  pigeonResult.query = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable SearchRequest *)nullableFromList:(NSArray *)list {
  return (list) ? [SearchRequest fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.query ?: [NSNull null],
  ];
}
@end

@implementation SearchReply
+ (instancetype)makeWithResult:(NSString *)result {
  SearchReply* pigeonResult = [[SearchReply alloc] init];
  pigeonResult.result = result;
  return pigeonResult;
}
+ (SearchReply *)fromList:(NSArray *)list {
  SearchReply *pigeonResult = [[SearchReply alloc] init];
  pigeonResult.result = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable SearchReply *)nullableFromList:(NSArray *)list {
  return (list) ? [SearchReply fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.result ?: [NSNull null],
  ];
}
@end

@interface ApiCodecReader : FlutterStandardReader
@end
@implementation ApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [SearchReply fromList:[self readValue]];
    case 129: 
      return [SearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ApiCodecWriter : FlutterStandardWriter
@end
@implementation ApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ApiCodecReaderWriter *readerWriter = [[ApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<Api> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_hello_world.Api.search"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchRequest:completion:)], @"Api api (%@) doesn't respond to @selector(searchRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SearchRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        [api searchRequest:arg_request completion:^(SearchReply *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
